package leetCode;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Set;
public class MalwareI {

	public int minMalwareSpread(int[][] graph, int[] initial) {

		Set<Integer> init = new HashSet<>();
		int minInfected = Integer.MAX_VALUE;
		int infectedNode = 0;
		int smallIndx = Integer.MAX_VALUE;

		for (int i : initial) {
			init.add(i);
		}

		for (int i = 0; i < initial.length; i++) {
			infectedNode = initial[i];
			init.remove(infectedNode);

			int totInfec = infectedCount(graph, init);

			if (totInfec < minInfected || minInfected == totInfec && initial[i] < smallIndx) {
				smallIndx = initial[i];
				minInfected = totInfec;
			}
			init.add(infectedNode);
		}

		return smallIndx;
	}

	public int infectedCount(int[][] graph, Set<Integer> init) {

		Set<Integer> bad = new HashSet<>();
		Queue<Integer> bfs = new LinkedList<Integer>();

		for (Integer i : init)
			bfs.add(i);

		while (!bfs.isEmpty()) {
			Integer next = bfs.remove();

			for (int i = 0; i < graph[next].length; i++) {
				if (graph[next][i] == 1 && !bad.contains(i)) {
					bad.add(i);
					bfs.add(i);
				}

			}
		}
		return bad.size();
	}
}
